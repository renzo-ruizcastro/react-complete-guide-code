[{"C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\index.js":"1","C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\App.js":"2","C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\components\\SimpleInput.js":"3","C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\hooks\\use-input.js":"4"},{"size":148,"mtime":1656538904599,"results":"5","hashOfConfig":"6"},{"size":179,"mtime":1656995346807,"results":"7","hashOfConfig":"6"},{"size":5025,"mtime":1657321146914,"results":"8","hashOfConfig":"6"},{"size":722,"mtime":1657320663717,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1acs0l7",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\index.js",[],["20","21"],"C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\App.js",[],"C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\components\\SimpleInput.js",["22","23","24","25"],"import { useState, useReducer, useRef, useEffect } from 'react';\r\nimport useInput from '../hooks/use-input';\r\n\r\n// const emailRegex;\r\n\r\nconst SimpleInput = props => {\r\n  const {\r\n    value: enteredName,\r\n    isValid: enteredNameIsValid,\r\n    hasError: nameInputHasError,\r\n    inputChangeHandler: nameChangedHandler,\r\n    inputBlurHandler: nameBlurHandler,\r\n    reset: resetNameInput,\r\n  } = useInput(value => value.trim() !== '');\r\n  // const nameInputRef = useRef();\r\n  // const [enteredName, setEnteredName] = useState('');\r\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\r\n  // const [enteredNameIsTouched, setEnteredNameIsTouched] = useState(false);\r\n  // const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const {\r\n    value: enteredEmail,\r\n    isValid: enteredEmailIsValid,\r\n    hasError: emailInputHasError,\r\n    inputChangeHandler: emailChangedHandler,\r\n    inputBlurHandler: emailBlurHandler,\r\n    reset: resetEmailInput,\r\n  } = useInput(value => value.includes('@'));\r\n  // const [enteredEmail, setEnteredEmail] = useState('');\r\n  // const [enteredEmailIsTouched, setEnteredEmailIsTouched] = useState(false);\r\n\r\n  // const enteredEmailIsValid = enteredEmail.includes('@');\r\n  // const enteredEmailIsValid = emailRegex.test(enteredEmail);\r\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailIsTouched;\r\n\r\n  // useEffect(() => {\r\n  //   if (enteredNameIsValid) console.log('Name input is valid!');\r\n  // }, [enteredNameIsValid]);\r\n\r\n  // Evaluates in each render cycle\r\n  // const enteredNameIsValid = enteredName.trim() !== '';\r\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameIsTouched;\r\n\r\n  let formIsValid = false;\r\n\r\n  if (\r\n    enteredNameIsValid &&\r\n    // && others\r\n    enteredEmailIsValid\r\n  ) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   if (enteredNameIsValid) {\r\n  //     // and other input validity values\r\n  //     setFormIsValid(true);\r\n  //   } else {\r\n  //     setFormIsValid(false);\r\n  //   }\r\n  // }, [enteredNameIsValid])\r\n\r\n  // const nameInputChangeHandler = event => {\r\n  //   setEnteredName(event.target.value);\r\n  //   // State updates as scheduled\r\n  //   // The line below doesn't have the updated state\r\n  //   // use the same data source from which the state is updated\r\n  //   // if (event.target.value.trim() !== '') {\r\n  //   //   setEnteredNameIsValid(true);\r\n  //   // }\r\n  // };\r\n\r\n  // const nameInputBlurHandler = event => {\r\n  //   setEnteredNameIsTouched(true);\r\n  //   // if (enteredName.trim() === '') {\r\n  //   //   setEnteredNameIsValid(false);\r\n  //   // }\r\n  // };\r\n\r\n  // const emailInputChangeHandler = event => {\r\n  //   setEnteredEmail(event.target.value);\r\n  // };\r\n\r\n  // const emailInputBlurHandler = event => {\r\n  //   setEnteredEmailIsTouched(true);\r\n  // };\r\n\r\n  const formSubmissionHandler = event => {\r\n    event.preventDefault();\r\n    // setEnteredNameIsTouched(true); // When submitted we can argue that the user has touched the input\r\n\r\n    // setEnteredEmailIsTouched(true);\r\n    // if (enteredName.trim() === '') {\r\n    //   setEnteredNameIsValid(false);\r\n    //   return;\r\n    // }\r\n    // if (!enteredNameIsValid) return;\r\n    if (!formIsValid) return;\r\n    // setEnteredNameIsValid(true);\r\n    console.log(enteredName, enteredEmail);\r\n    // const enteredValue = nameInputRef.current.value;\r\n    // console.log(enteredValue);\r\n    // nameInputRef.current.value = ''; // Not optimal, you're playing with the DOM. Leave manipulating to React\r\n    // setEnteredName('');\r\n    // setEnteredNameIsTouched(false);\r\n    resetNameInput();\r\n    // setEnteredEmail('');\r\n    // setEnteredEmailIsTouched(false);\r\n    resetEmailInput();\r\n  };\r\n\r\n  const nameInputClasses = `form-control${nameInputHasError ? ' invalid' : ''}`;\r\n\r\n  const emailInputClasses = `form-control${\r\n    emailInputHasError ? ' invalid' : ''\r\n  }`;\r\n\r\n  return (\r\n    <form onSubmit={formSubmissionHandler}>\r\n      <div className={nameInputClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input\r\n          // ref={nameInputRef}\r\n          // onChange={nameInputChangeHandler}\r\n          onChange={nameChangedHandler}\r\n          // onBlur={nameInputBlurHandler}\r\n          onBlur={nameBlurHandler}\r\n          type=\"text\"\r\n          id=\"name\"\r\n          value={enteredName}\r\n        />\r\n        {nameInputHasError && (\r\n          <p className=\"error-text\">Name must not be empty</p>\r\n        )}\r\n      </div>\r\n      <div className={emailInputClasses}>\r\n        <label htmlFor=\"email\">Your Email</label>\r\n        <input\r\n          onChange={emailChangedHandler}\r\n          onBlur={emailBlurHandler}\r\n          type=\"text\"\r\n          id=\"email\"\r\n          value={enteredEmail}\r\n        />\r\n        {emailInputHasError && (\r\n          <p className=\"error-text\">Please enter a valid email</p>\r\n        )}\r\n      </div>\r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid}>Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n","C:\\Users\\renzo\\Documents\\GitHub\\react-complete-guide-code\\code-me\\src\\hooks\\use-input.js",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":1,"column":10,"nodeType":"32","messageId":"33","endLine":1,"endColumn":18},{"ruleId":"30","severity":1,"message":"34","line":1,"column":20,"nodeType":"32","messageId":"33","endLine":1,"endColumn":30},{"ruleId":"30","severity":1,"message":"35","line":1,"column":32,"nodeType":"32","messageId":"33","endLine":1,"endColumn":38},{"ruleId":"30","severity":1,"message":"36","line":1,"column":40,"nodeType":"32","messageId":"33","endLine":1,"endColumn":49},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]